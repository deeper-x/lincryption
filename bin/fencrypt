#!/bin/bash
set -o nounset

# declaration header
declare -r PASSFILE=${HOME}"/.linpass"
declare -r SUCCESS_MSG="success"
declare -r FAILURE_MSG="failed"

# preparing requirements
declare -r GPG=$( command -v gpg )
declare -r SHRED=$( command -v shred )

# return status list
declare -i EXIT_OK=0
declare -i PASSFILE_ERR=101
declare -i GPGMISSING_ERR=102
declare -i FILEMISSING_ERR=103
declare -i INPUTNOTAFILE_ERR=104
declare -i SHREDMISSING_ERR=105
declare -i ENC_GENERIC_ERR=106
declare -i DEL_GENERIC_ERR=107

# main function
function main() {
    #check gpg installation - exit 102
    if [ ! -x ${GPG} ];then
        echo "Missing gpg command"
        echo ${FAILURE_MSG}
        return ${GPGMISSING_ERR}
    fi

    #check shred command - exit 105
    if [ ! -x ${SHRED} ];then
        echo "Missing shred command"
        echo ${FAILURE_MSG}
        return ${SHREDMISSING_ERR}
    fi

    # check input parameter - exit 103
    if [ $# -eq 0 ];then
        echo "Missing input file (as a parameter)"
        echo ${FAILURE_MSG}
        return ${FILEMISSING_ERR}
    fi
    
    # declaring assets
    i_file=${1}
    o_file="${1}.gpg"

    # start reading input
    echo "Reading ${i_file}..."

    # check input is a file - exit 104
    if [ ! -f ${i_file} ];then
        echo "Input parameter is not a file"
        echo ${FAILURE_MSG}
        return ${INPUTNOTAFILE_ERR}
    fi

    # check .linpass exists - exit 101 
    if [ ! -f ${PASSFILE} ];then
        echo "Missing password file ${PASSFILE}"
        echo ${FAILURE_MSG}
        return ${PASSFILE_ERR}
    fi

    # encryption
    echo -n "File encryption..." 
    ${GPG} --batch --output "${o_file}" --passphrase $( cat ${PASSFILE} ) --symmetric ${i_file}
    if [ $? -eq 0 ];then
        echo ${SUCCESS_MSG}
    else
        echo ${FAILURE_MSG}
        return ${ENC_GENERIC_ERR}
    fi

    # file deletion
    echo -n "Cleaning up..."
    ${SHRED} -zu -n 3 ${i_file}
    if [ $? -eq 0 ];then
        echo ${SUCCESS_MSG}
    else
        echo ${FAILURE_MSG}
        return ${DEL_GENERIC_ERR}
    fi

    # operation completed
    echo "Encrypted file: ${o_file}."
    return ${EXIT_OK}
}

# calling main function
main ${1}
    